<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<!-- 引入外置文件 -->
	<bean id="propertyConfigurer"
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 要是有多个配置文件，只需要在这里继续添加即可 -->
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置数据源 -->
	<bean id="dataSource"
			class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- 使用properties来配置 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 配置mybatis的文件，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" value="dataSource" />
		<property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
		<property name="configLocation" value="classpath*:mybatis-config.xml" />
		<!-- <property name="typeAliasesPackage" value="con.tiantian.ckeditor.model" /> -->
	</bean>
	
	<!-- mybatis-spring为上面提供了一个实现了SqlSession接口的SqlSessionTemplate类，可以被多个Daot同时使用。
		同时它跟spring的事务进行了关联，确保当前被使用的SqlSession是一个已经和spring的事务进行绑定了的。而且它还可以自己管理
		Session的提交和关闭。当使用spring的事务管理机制后，SqlSession还可以跟着spring的事务一起提交和回滚 -->
	<bean id="sqlSessionTemplate"
			class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 自动扫码所有注解该路径（一旦使用该配置，开启注解部分<context:annotation-config />就可以不配置） -->
	<context:component-scan base-package="com.kaidin.db.dao" />
</beans>